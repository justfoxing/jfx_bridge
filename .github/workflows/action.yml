name: Test and build
on: [push]
jobs:
  test: 
    runs-on: ubuntu-latest

    strategy:
        fail-fast: false # we don't fail fast, we want info on all the failed tests for all our combinations, not just the first one to fail
        matrix:
            client_version: ["2.7", "3.10", "3.11"]
            server_version: ["2.7", "3.10"] # Note: 3.11 has some issue when running as a server which causes "test_nonreturn_marker_local" to fail. Not sure why. TODO, but not really a major issue as our main target is ghidra's jython 2.7 server

    steps:    
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Set up server python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.server_version }}

      - name: Setup client python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.client_version }}

      - name: Test py3 client with pytest (3.7+)
        shell: bash
        env:
            TEST_PORT: 2222
            SRV_ERR_LOG: test-reports/test_bridge_server-${{ matrix.client_version }}-${{ matrix.server_version }}.err
            SRV_OUT_LOG: test-reports/test_bridge_server-${{ matrix.client_version }}-${{ matrix.server_version }}.log
            CLI_OUT_LOG: test-reports/test_bridge_client-${{ matrix.client_version }}-${{ matrix.server_version }}.log
        if: startsWith( matrix.client_version, '3.' )
        run: |
            set -eo pipefail
            python${{ matrix.client_version }} -m pip install pytest
            mkdir test-reports
            touch $SRV_ERR_LOG
            python${{ matrix.server_version }} test_bridge_server.py >${{ env.SRV_OUT_LOG }} 2> >(tee -a ${{ env.SRV_ERR_LOG }} >&2) & # Run the test jfx_bridge server
            ( tail -f ${{ env.SRV_ERR_LOG }} & ) | grep -q "jfx_bridge.bridge:serving!" # pause until we see the bridge server start logging messages
            python${{ matrix.client_version }} -m pytest --capture=tee-sys --junit-xml=test-reports/test-pytest-${{ matrix.client_version }}-${{ matrix.server_version }}.xml --log-cli-level=DEBUG jfx_bridge/test_bridge.py | tee ${{ env.CLI_OUT_LOG }}
        
        
      - name: Test py2 client with nose
        shell: bash
        env:
            TEST_PORT: 2222
            SRV_ERR_LOG: test-reports/test_bridge_server-${{ matrix.client_version }}-${{ matrix.server_version }}.err
            SRV_OUT_LOG: test-reports/test_bridge_server-${{ matrix.client_version }}-${{ matrix.server_version }}.log
            CLI_OUT_LOG: test-reports/test_bridge_client-${{ matrix.client_version }}-${{ matrix.server_version }}.log
        if: startsWith( matrix.client_version, '2.' )
        run: |
            set -eo pipefail
            python${{ matrix.client_version }} -m pip install nose
            mkdir test-reports
            touch $SRV_ERR_LOG
            python${{ matrix.server_version }} test_bridge_server.py >${{ env.SRV_OUT_LOG }} 2> >(tee -a ${{ env.SRV_ERR_LOG }} >&2) & # Run the test jfx_bridge server
            ( tail -f ${{ env.SRV_ERR_LOG }} & ) | grep -q "jfx_bridge.bridge:serving!" # pause until we see the bridge server start logging messages
            python${{ matrix.client_version }} -m nose --nocapture --nologcapture --with-xunit --xunit-file=test-reports/test-nose-${{ matrix.client_version }}-${{ matrix.server_version }}.xml | tee ${{ env.CLI_OUT_LOG }}
            
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: always() # we always want to keep the test files
        with:
          name: test-reports
          path: test-reports/
          
  build: 
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
            fetch-depth: '0' # make sure we get tags so git describe will work

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
          
      - name: Build wheel
        run: |
            python3 -m pip install --user --upgrade wheel setuptools # make sure we've got the latest version, to support using Markdown
            python3 setup.py sdist bdist_wheel --universal

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: dist/
      
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
            fail_on_unmatched_files: true
            files:
                dist/*
          
      - name: Publish to PyPi
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true